interface EventType {
  code: string;
  name: string;
  description?: string;
}

interface SeatType {
  code: string;
  name: string;
  description?: string;
  isFree: boolean;
}

export function generateTypes(
  eventTypes: EventType[],
  seatTypes: SeatType[],
): string {
  // Generate event type union
  const eventTypeUnion =
    eventTypes.length > 0
      ? eventTypes.map((e) => `"${e.code}"`).join(" | ")
      : "string";

  // Generate seat type union
  const seatTypeUnion =
    seatTypes.length > 0
      ? seatTypes.map((s) => `"${s.code}"`).join(" | ")
      : "string";

  // Generate detailed comments
  const eventComments = eventTypes
    .map(
      (e) =>
        ` * - "${e.code}": ${e.name}${e.description ? ` - ${e.description}` : ""}`,
    )
    .join("\n");

  const seatComments = seatTypes
    .map(
      (s) =>
        ` * - "${s.code}": ${s.name}${s.description ? ` - ${s.description}` : ""} ${s.isFree ? "(Free)" : ""}`,
    )
    .join("\n");

  return `// Auto-generated by Commet CLI
// Do not edit this file manually - run 'commet pull' to update

/**
 * Module augmentation for automatic type inference
 * 
 * This augments the Commet SDK to automatically use your organization's
 * specific event and seat types without requiring generic type parameters.
 * 
 * Event types available in your organization:
${eventComments}
 * 
 * Seat types available in your organization:
${seatComments}
 * 
 * @example
 * import { Commet } from '@commet/node';
 * 
 * const commet = new Commet({ apiKey: 'your-api-key' });
 * 
 * // ✅ Autocomplete works automatically!
 * await commet.usage.events.create({
 *   eventType: 'api_call', // Only accepts your event types
 *   customerId: 'cus_123'
 * });
 * 
 * // ✅ Same for seats
 * await commet.seats.add('cus_123', 'admin', 5);
 */
declare module '@commet/node' {
  interface CommetGeneratedTypes {
    eventType: ${eventTypeUnion};
    seatType: ${seatTypeUnion};
  }
}
`;
}
