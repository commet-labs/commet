interface EventType {
  code: string;
  name: string;
  description?: string;
}

interface SeatType {
  code: string;
  name: string;
  description?: string;
  isFree: boolean;
}

export function generateTypes(
  eventTypes: EventType[],
  seatTypes: SeatType[],
): string {
  // Generate event type union
  const eventTypeUnion =
    eventTypes.length > 0
      ? eventTypes.map((e) => `"${e.code}"`).join(" | ")
      : "string";

  // Generate seat type union
  const seatTypeUnion =
    seatTypes.length > 0
      ? seatTypes.map((s) => `"${s.code}"`).join(" | ")
      : "string";

  // Generate detailed comments
  const eventComments = eventTypes
    .map(
      (e) =>
        ` * - "${e.code}": ${e.name}${e.description ? ` - ${e.description}` : ""}`,
    )
    .join("\n");

  const seatComments = seatTypes
    .map(
      (s) =>
        ` * - "${s.code}": ${s.name}${s.description ? ` - ${s.description}` : ""} ${s.isFree ? "(Free)" : ""}`,
    )
    .join("\n");

  return `// Auto-generated by Commet CLI
// Do not edit this file manually - run 'commet pull' to update

/**
 * Event types available in your organization
${eventComments}
 */
export type CommetEventType = ${eventTypeUnion};

/**
 * Seat types available in your organization
${seatComments}
 */
export type CommetSeatType = ${seatTypeUnion};

/**
 * Use these types with the Commet SDK for type-safe event and seat tracking
 * 
 * @example
 * import { Commet } from 'commet';
 * import type { CommetEventType, CommetSeatType } from './.commet';
 * 
 * const commet = new Commet({ apiKey: 'your-api-key' });
 * 
 * // Type-safe event tracking
 * await commet.usage.sendEvent<CommetEventType>({
 *   customerId: 'cust_123',
 *   eventType: 'api_call', // Autocomplete works!
 *   timestamp: new Date(),
 * });
 * 
 * // Type-safe seat management
 * await commet.seats.updateSeats<CommetSeatType>({
 *   customerId: 'cust_123',
 *   seatType: 'admin_seat', // Autocomplete works!
 *   totalSeats: 5,
 * });
 */
`;
}
